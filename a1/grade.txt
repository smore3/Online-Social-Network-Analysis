Grade: 43.00/50.00

2 Deduction(s):

--------------
#1: 2.00 points
Failing test: test_approx_right: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 185, in test_approx_right
    self.assertEqual('no', is_approximation_always_right().lower())
AssertionError: 'no' != 'yes'
- no
+ yes


source:
    def test_approx_right(self):
         """
         @points=2
         """
         self.assertEqual('no', is_approximation_always_right().lower())
--------------

--------------
#2: 5.00 points
Failing test: test_bfs_3: 
        @points=5
        
Traceback (most recent call last):
  File "../assignments-sol/a1/a1_test.py", line 100, in test_bfs_3
    [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)])
AssertionError: Lists differ: [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)] != [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)]

First differing element 4:
('E', 3)
('E', 2)

- [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 3), ('F', 3), ('G', 2)]
?                                                ^         ^

+ [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)]
?                                                ^         ^


source:
    def test_bfs_3(self):
         """
         @points=5
         """
         node2distances, node2num_paths, node2parents = bfs(example_graph2(), 'A', max_depth=10)
         self.assertListEqual(sorted(node2distances.items()),
                              [('A', 0), ('B', 2), ('C', 1), ('D', 1), ('E', 3), ('F', 4), ('G', 2)])
         self.assertListEqual(sorted(node2num_paths.items()),
                              [('A', 1), ('B', 1), ('C', 1), ('D', 1), ('E', 2), ('F', 1), ('G', 2)])
         res = sorted((node, sorted(parents)) for node, parents in node2parents.items())
         self.assertListEqual(res,
                              [('B', ['D']), ('C', ['A']), ('D', ['A']), ('E', ['B', 'G']), ('F', ['E']), ('G', ['C', 'D'])])
--------------

